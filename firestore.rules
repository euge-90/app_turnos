rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ========================================
    // HELPER FUNCTIONS
    // ========================================

    // Verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }

    // Verificar si el usuario es dueño del documento
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Verificar si el usuario es administrador
    // Verifica el email del token de autenticación
    function isAdmin() {
      return isAuthenticated() &&
             request.auth.token.email == 'admin@peluqueria.com';
    }

    // ✅ Verificar si una fecha (string o Timestamp) es futura
    // Ahora las fechas se guardan como string "2025-10-31"
    // Si es Timestamp, validar; si es string, confiar en validación del cliente
    function isFutureDate(fecha) {
      return (fecha is timestamp) ? (fecha >= request.time) : true;
    }

    // ✅ Verificar si la fecha de un turno es pasada
    // Ahora las fechas se guardan como string "2025-10-31"
    // Si es Timestamp, validar; si es string, confiar en validación del cliente
    function isPastAppointment(turnoData) {
      return (turnoData.fecha is timestamp) ? (turnoData.fecha < request.time) : false;
    }

    // ========================================
    // USUARIOS (Collection: usuarios)
    // ========================================
    match /usuarios/{userId} {
      // Lectura: El usuario puede leer su propio documento o el admin puede leer cualquiera
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());

      // Creación: El usuario puede crear su propio documento al registrarse
      // No puede incluir campos sensibles como isAdmin
      allow create: if isAuthenticated() &&
                       isOwner(userId) &&
                       !request.resource.data.keys().hasAny(['isAdmin', 'admin']) &&
                       request.resource.data.keys().hasAll(['nombre', 'email']);

      // Actualización: El usuario puede actualizar su propio documento
      // No puede modificar email, isAdmin u otros campos sensibles
      allow update: if isAuthenticated() &&
                       isOwner(userId) &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['email', 'isAdmin', 'admin', 'fechaRegistro']);

      // Eliminación: Solo el admin o el propio usuario pueden eliminar su cuenta
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    // ========================================
    // TURNOS (Collection: turnos)
    // ========================================
    match /turnos/{turnoId} {
      // Lectura: Cualquier usuario autenticado puede leer turnos
      // Esto es necesario para:
      // - Ver disponibilidad en el calendario
      // - Ver horarios ocupados al reservar
      // - Cargar sus propios turnos
      // Nota: Los datos sensibles no se exponen (solo fecha, hora, servicio, estado)
      allow read: if isAuthenticated();

      // Creación: El usuario puede crear turnos solo para sí mismo
      // VALIDACIONES CRÍTICAS (soluciona BUG-003):
      // - La fecha debe ser futura (no se permiten turnos en fechas pasadas)
      // - Debe incluir todos los campos obligatorios
      // - El estado debe ser 'confirmado' al crear
      // - El usuarioId debe coincidir con el usuario autenticado
      // - El servicio debe tener estructura válida
      allow create: if isAuthenticated() &&
                       request.resource.data.usuarioId == request.auth.uid &&
                       isFutureDate(request.resource.data.fecha) &&
                       request.resource.data.keys().hasAll([
                         'usuarioId',
                         'usuarioNombre',
                         'usuarioEmail',
                         'fecha',
                         'hora',
                         'servicio',
                         'estado',
                         'createdAt'
                       ]) &&
                       request.resource.data.estado == 'confirmado' &&
                       request.resource.data.servicio is map &&
                       request.resource.data.servicio.keys().hasAll(['id', 'nombre', 'duracion', 'precio']);

      // Actualización: El usuario puede actualizar/cancelar sus propios turnos
      // El admin puede actualizar cualquier turno
      // RESTRICCIONES:
      // - Los usuarios solo pueden cambiar el estado a 'cancelado'
      // - Los usuarios pueden modificar fecha/hora (para función de modificación)
      // - No se pueden modificar turnos pasados (excepto admin)
      allow update: if isAuthenticated() &&
                       (
                         // Usuario dueño del turno
                         (
                           resource.data.usuarioId == request.auth.uid &&
                           !isPastAppointment(resource.data) &&
                           (
                             // Cancelación
                             (request.resource.data.estado == 'cancelado' &&
                              resource.data.estado == 'confirmado') ||
                             // Modificación de fecha/hora
                             (request.resource.data.estado == 'confirmado' &&
                              resource.data.estado == 'confirmado' &&
                              isFutureDate(request.resource.data.fecha))
                           )
                         ) ||
                         // Admin puede hacer cualquier modificación
                         isAdmin()
                       );

      // Eliminación: Solo el admin puede eliminar turnos físicamente
      // Los usuarios deben usar cancelación (cambiar estado)
      allow delete: if isAdmin();
    }

    // ========================================
    // SERVICIOS (Collection: servicios)
    // ========================================
    match /servicios/{servicioId} {
      // Lectura: Cualquier usuario autenticado puede ver los servicios
      allow read: if isAuthenticated();

      // Validación de estructura al crear/actualizar
      // - Debe tener nombre, duracion, precio y activo
      function isValidService() {
        return request.resource.data.keys().hasAll(['nombre', 'duracion', 'precio', 'activo']) &&
               request.resource.data.duracion is int &&
               request.resource.data.duracion > 0 &&
               request.resource.data.precio is number &&
               request.resource.data.precio >= 0;
      }

      // Crear, actualizar y eliminar: Solo el admin
      allow create: if isAdmin() && isValidService();
      allow update: if isAdmin() && isValidService();
      allow delete: if isAdmin();
    }

    // ========================================
    // FECHAS BLOQUEADAS (Collection: fechasBloqueadas)
    // ========================================
    match /fechasBloqueadas/{fechaId} {
      // Lectura: Cualquier usuario autenticado puede ver fechas bloqueadas
      allow read: if isAuthenticated();

      // Crear, actualizar y eliminar: Solo el admin
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['fecha']);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ========================================
    // CONFIGURACIÓN GLOBAL (Collection: configuracion)
    // ========================================
    match /configuracion/{documento} {
      // Lectura: Todos pueden leer la configuración pública
      allow read: if true;

      // Escritura: Solo el admin
      allow write: if isAdmin();
    }

    // ========================================
    // ESTADÍSTICAS (Collection: estadisticas)
    // ========================================
    match /estadisticas/{documento} {
      // Lectura: Solo el admin
      allow read: if isAdmin();

      // Escritura: Bloqueada (se genera automáticamente)
      allow write: if false;
    }

    // ========================================
    // LISTA DE ESPERA (Collection: listaEspera) - V2
    // ========================================
    match /listaEspera/{listaId} {
      // Lectura: El usuario puede leer sus propias listas de espera o el admin puede leer todas
      allow read: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid || isAdmin());

      // Creación: El usuario puede agregar su propia lista de espera
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll([
                         'userId',
                         'userEmail',
                         'userName',
                         'fecha',
                         'hora',
                         'servicio',
                         'servicioId',
                         'notificado',
                         'createdAt'
                       ]) &&
                       request.resource.data.notificado == false;

      // Actualización: Solo el admin puede actualizar (para marcar como notificado)
      allow update: if isAdmin();

      // Eliminación: El usuario puede eliminar sus propias listas de espera o el admin puede eliminar cualquiera
      allow delete: if isAuthenticated() &&
                       (resource.data.userId == request.auth.uid || isAdmin());
    }

    // ========================================
    // AUDITORÍA (Collection: auditoria) - V2 (Opcional)
    // ========================================
    match /auditoria/{logId} {
      // Lectura: Solo el admin puede leer los logs
      allow read: if isAdmin();

      // Creación: Permitir la creación automática desde el cliente
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll([
                         'accion',
                         'userId',
                         'userEmail',
                         'timestamp'
                       ]);

      // Actualización y eliminación: Solo admins
      allow update, delete: if isAdmin();
    }

    // ========================================
    // BLOQUEAR TODO LO DEMÁS
    // ========================================
    // Por defecto, todo lo demás está bloqueado
    // Esto es una buena práctica de seguridad
  }
}
